{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramanakumar/taskglyph/src/lib/db/serverDb.ts"],"sourcesContent":["import { Pool } from \"pg\";\n\nconst globalForPg = global as unknown as { pgPool: Pool | undefined };\n\nconst pool =\n  globalForPg.pgPool ??\n  new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: {\n      rejectUnauthorized: false,\n    },\n  });\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalForPg.pgPool = pool;\n}\n\nexport default pool;\n"],"names":[],"mappings":";;;;AAAA;;;;;;AAEA,MAAM;AAEN,MAAM,OACJ,YAAY,MAAM,IAClB,IAAI,4GAAI,CAAC;IACP,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;AACF;AAEF,wCAA2C;IACzC,YAAY,MAAM,GAAG;AACvB;uCAEe","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramanakumar/taskglyph/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\nimport pool from \"@/lib/db/serverDb\"; // Your Neon DB connection\nimport bcrypt from \"bcrypt\";\nimport { v4 as uuidv4 } from \"uuid\"; // To generate a unique user ID\n\n// Define expected request body structure (optional but good practice)\ninterface RegisterRequestBody {\n  email?: string;\n  password?: string;\n  name?: string;\n}\n\nexport async function POST(request: NextRequest) {\n  try {\n    const body: RegisterRequestBody = await request.json();\n    const { email, password, name } = body;\n\n    // --- Basic Validation ---\n    if (!email || !password) {\n      return NextResponse.json(\n        { error: \"Email and password are required\" },\n        { status: 400 }\n      );\n    }\n    // Very simple password length check (you might want more complex rules)\n    if (password.length < 6) {\n      return NextResponse.json(\n        { error: \"Password must be at least 6 characters long\" },\n        { status: 400 }\n      );\n    }\n    // Basic email format check (optional, client-side usually handles this)\n    if (!/\\S+@\\S+\\.\\S+/.test(email)) {\n      return NextResponse.json(\n        { error: \"Invalid email format\" },\n        { status: 400 }\n      );\n    }\n    // --- End Validation ---\n\n    const lowerCaseEmail = email.toLowerCase(); // Store emails consistently\n\n    // --- Check if user already exists ---\n    const { rows: existingUsers } = await pool.query(\n      \"SELECT id FROM users WHERE email = $1\",\n      [lowerCaseEmail]\n    );\n\n    if (existingUsers.length > 0) {\n      return NextResponse.json(\n        { error: \"Email already registered\" },\n        { status: 409 } // 409 Conflict status code\n      );\n    }\n    // --- End Check ---\n\n    // --- Hash Password ---\n    const saltRounds = 10; // Standard salt rounds for bcrypt\n    const hashedPassword = await bcrypt.hash(password, saltRounds);\n    // --- End Hashing ---\n\n    // --- Create New User ---\n    const newUserId = uuidv4(); // Generate a unique ID\n    await pool.query(\n      `INSERT INTO users (id, email, name, password, tier)\n       VALUES ($1, $2, $3, $4, $5)`,\n      [newUserId, lowerCaseEmail, name || null, hashedPassword, \"free\"] // Default to 'free' tier\n    );\n    console.log(\"✅ New email user created:\", newUserId, lowerCaseEmail);\n    // --- End Creation ---\n\n    // Return success response (don't return password!)\n    return NextResponse.json(\n      { message: \"User created successfully\", userId: newUserId },\n      { status: 201 } // 201 Created status code\n    );\n  } catch (error) {\n    console.error(\"❌ Registration error:\", error);\n    return NextResponse.json(\n      { error: \"An unexpected error occurred during registration\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;;AAAA;AACA,2NAAsC,0BAA0B;AAChE;AACA,4SAAqC,+BAA+B;;;;;;;;;AAS7D,eAAe,KAAK,OAAoB;IAC7C,IAAI;QACF,MAAM,OAA4B,MAAM,QAAQ,IAAI;QACpD,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG;QAElC,2BAA2B;QAC3B,IAAI,CAAC,SAAS,CAAC,UAAU;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAkC,GAC3C;gBAAE,QAAQ;YAAI;QAElB;QACA,wEAAwE;QACxE,IAAI,SAAS,MAAM,GAAG,GAAG;YACvB,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA8C,GACvD;gBAAE,QAAQ;YAAI;QAElB;QACA,wEAAwE;QACxE,IAAI,CAAC,eAAe,IAAI,CAAC,QAAQ;YAC/B,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAuB,GAChC;gBAAE,QAAQ;YAAI;QAElB;QACA,yBAAyB;QAEzB,MAAM,iBAAiB,MAAM,WAAW,IAAI,4BAA4B;QAExE,uCAAuC;QACvC,MAAM,EAAE,MAAM,aAAa,EAAE,GAAG,MAAM,yIAAI,CAAC,KAAK,CAC9C,yCACA;YAAC;SAAe;QAGlB,IAAI,cAAc,MAAM,GAAG,GAAG;YAC5B,OAAO,gJAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA2B,GACpC;gBAAE,QAAQ;YAAI,EAAE,2BAA2B;;QAE/C;QACA,oBAAoB;QAEpB,wBAAwB;QACxB,MAAM,aAAa,IAAI,kCAAkC;QACzD,MAAM,iBAAiB,MAAM,gHAAM,CAAC,IAAI,CAAC,UAAU;QACnD,sBAAsB;QAEtB,0BAA0B;QAC1B,MAAM,YAAY,IAAA,mLAAM,KAAI,uBAAuB;QACnD,MAAM,yIAAI,CAAC,KAAK,CACd,CAAC;kCAC2B,CAAC,EAC7B;YAAC;YAAW;YAAgB,QAAQ;YAAM;YAAgB;SAAO,CAAC,yBAAyB;;QAE7F,QAAQ,GAAG,CAAC,6BAA6B,WAAW;QACpD,uBAAuB;QAEvB,mDAAmD;QACnD,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAA6B,QAAQ;QAAU,GAC1D;YAAE,QAAQ;QAAI,EAAE,0BAA0B;;IAE9C,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,yBAAyB;QACvC,OAAO,gJAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAmD,GAC5D;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}