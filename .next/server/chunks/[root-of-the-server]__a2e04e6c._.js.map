{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramanakumar/taskglyph/src/lib/db/serverDb.ts"],"sourcesContent":["import { Pool } from \"pg\";\n\nconst globalForPg = global as unknown as { pgPool: Pool | undefined };\n\nconst pool =\n  globalForPg.pgPool ??\n  new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: {\n      rejectUnauthorized: false,\n    },\n  });\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalForPg.pgPool = pool;\n}\n\nexport default pool;\n"],"names":[],"mappings":";;;;AAAA;;;;;;AAEA,MAAM;AAEN,MAAM,OACJ,YAAY,MAAM,IAClB,IAAI,4GAAI,CAAC;IACP,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;AACF;AAEF,wCAA2C;IACzC,YAAY,MAAM,GAAG;AACvB;uCAEe","debugId":null}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramanakumar/taskglyph/src/lib/auth/options.ts"],"sourcesContent":["import type { NextAuthOptions, User } from \"next-auth\"; // Import User type\nimport GoogleProvider from \"next-auth/providers/google\";\nimport CredentialsProvider from \"next-auth/providers/credentials\"; // 1. Import CredentialsProvider\nimport pool from \"@/lib/db/serverDb\";\nimport bcrypt from \"bcrypt\"; // 2. Import bcrypt\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n    }),\n    // 3. Add CredentialsProvider\n    CredentialsProvider({\n      name: \"Email & Password\",\n      credentials: {\n        email: {\n          label: \"Email\",\n          type: \"email\",\n          placeholder: \"you@example.com\",\n        },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials): Promise<User | null> {\n        // Check if credentials are provided\n        if (!credentials?.email || !credentials?.password) {\n          console.error(\"Credentials missing\");\n          return null;\n        }\n\n        try {\n          // Find user by email in your Neon DB\n          const { rows } = await pool.query(\n            \"SELECT id, email, name, password FROM users WHERE email = $1\",\n            [credentials.email.toLowerCase()] // Normalize email to lowercase\n          );\n\n          if (rows.length === 0) {\n            console.log(\"No user found with that email\");\n            return null; // User not found\n          }\n\n          const user = rows[0];\n\n          // Check if user signed up with Google (no password)\n          if (!user.password) {\n            console.log(\n              \"User signed up via Google, password login not possible\"\n            );\n            // Optionally: You could throw an error here to give specific feedback\n            // throw new Error(\"Please sign in using Google.\");\n            return null;\n          }\n\n          // Verify the password using bcrypt\n          const passwordIsValid = await bcrypt.compare(\n            credentials.password,\n            user.password // The hashed password from your DB\n          );\n\n          if (!passwordIsValid) {\n            console.log(\"Invalid password\");\n            return null; // Incorrect password\n          }\n\n          console.log(\"✅ Password validation successful for:\", user.email);\n\n          // Return the user object (must include id, can include name, email)\n          // NextAuth uses this object to create the session/token\n          return {\n            id: user.id,\n            name: user.name,\n            email: user.email,\n          };\n        } catch (error) {\n          console.error(\"❌ DB error during authorization:\", error);\n          return null; // Return null on error\n        }\n      },\n    }),\n  ],\n\n  session: {\n    strategy: \"jwt\",\n  },\n\n  secret: process.env.NEXTAUTH_SECRET,\n\n  pages: {\n    signIn: \"/auth/signin\",\n    // You might want to add error page:\n    // error: '/auth/error',\n  },\n\n  callbacks: {\n    async jwt({ token, user }) {\n      // Persist the user ID from either Google or Credentials login to the token\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n\n    async session({ session, token }) {\n      if (session.user && token.id) {\n        // Ensure token.id exists\n        session.user.id = token.id as string;\n      }\n      return session;\n    },\n\n    async signIn({ user, account }) {\n      // Google sign-in logic (remains the same)\n      if (account?.provider === \"google\" && user.email) {\n        const userId = user.id as string;\n        try {\n          const { rows } = await pool.query(\n            \"SELECT id FROM users WHERE id = $1\",\n            [userId]\n          );\n          if (rows.length === 0) {\n            await pool.query(\n              `INSERT INTO users (id, email, name, tier)\n               VALUES ($1, $2, $3, $4)`,\n              [userId, user.email, user.name || null, \"free\"]\n            );\n            console.log(\"✅ New Google user created:\", userId);\n          }\n        } catch (error) {\n          console.error(\"❌ DB error during Google sign-in:\", error);\n          return false;\n        }\n      }\n\n      return true;\n    },\n  },\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramanakumar/taskglyph/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { authOptions } from \"@/lib/auth/options\";\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;;;;;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC,8IAAW","debugId":null}}]
}