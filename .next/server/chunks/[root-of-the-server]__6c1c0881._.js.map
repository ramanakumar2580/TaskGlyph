{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramanakumar/taskglyph/src/lib/db/serverDb.ts"],"sourcesContent":["import { Pool } from \"pg\";\n\nconst globalForPg = global as unknown as { pgPool: Pool | undefined };\n\nconst pool =\n  globalForPg.pgPool ??\n  new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: {\n      rejectUnauthorized: false,\n    },\n  });\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalForPg.pgPool = pool;\n}\n\nexport default pool;\n"],"names":[],"mappings":";;;;AAAA;;;;;;AAEA,MAAM;AAEN,MAAM,OACJ,YAAY,MAAM,IAClB,IAAI,4GAAI,CAAC;IACP,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;AACF;AAEF,wCAA2C;IACzC,YAAY,MAAM,GAAG;AACvB;uCAEe","debugId":null}},
    {"offset": {"line": 163, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramanakumar/taskglyph/src/lib/auth/options.ts"],"sourcesContent":["import type { NextAuthOptions, User } from \"next-auth\"; // Import User type\nimport GoogleProvider from \"next-auth/providers/google\";\nimport CredentialsProvider from \"next-auth/providers/credentials\"; // 1. Import CredentialsProvider\nimport pool from \"@/lib/db/serverDb\";\nimport bcrypt from \"bcrypt\"; // 2. Import bcrypt\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n    }),\n    // 3. Add CredentialsProvider\n    CredentialsProvider({\n      name: \"Email & Password\",\n      credentials: {\n        email: {\n          label: \"Email\",\n          type: \"email\",\n          placeholder: \"you@example.com\",\n        },\n        password: { label: \"Password\", type: \"password\" },\n      },\n      async authorize(credentials): Promise<User | null> {\n        // Check if credentials are provided\n        if (!credentials?.email || !credentials?.password) {\n          console.error(\"Credentials missing\");\n          return null;\n        }\n\n        try {\n          // Find user by email in your Neon DB\n          const { rows } = await pool.query(\n            \"SELECT id, email, name, password FROM users WHERE email = $1\",\n            [credentials.email.toLowerCase()] // Normalize email to lowercase\n          );\n\n          if (rows.length === 0) {\n            console.log(\"No user found with that email\");\n            return null; // User not found\n          }\n\n          const user = rows[0];\n\n          // Check if user signed up with Google (no password)\n          if (!user.password) {\n            console.log(\n              \"User signed up via Google, password login not possible\"\n            );\n            // Optionally: You could throw an error here to give specific feedback\n            // throw new Error(\"Please sign in using Google.\");\n            return null;\n          }\n\n          // Verify the password using bcrypt\n          const passwordIsValid = await bcrypt.compare(\n            credentials.password,\n            user.password // The hashed password from your DB\n          );\n\n          if (!passwordIsValid) {\n            console.log(\"Invalid password\");\n            return null; // Incorrect password\n          }\n\n          console.log(\"✅ Password validation successful for:\", user.email);\n\n          // Return the user object (must include id, can include name, email)\n          // NextAuth uses this object to create the session/token\n          return {\n            id: user.id,\n            name: user.name,\n            email: user.email,\n          };\n        } catch (error) {\n          console.error(\"❌ DB error during authorization:\", error);\n          return null; // Return null on error\n        }\n      },\n    }),\n  ],\n\n  session: {\n    strategy: \"jwt\",\n  },\n\n  secret: process.env.NEXTAUTH_SECRET,\n\n  pages: {\n    signIn: \"/auth/signin\",\n    // You might want to add error page:\n    // error: '/auth/error',\n  },\n\n  callbacks: {\n    async jwt({ token, user }) {\n      // Persist the user ID from either Google or Credentials login to the token\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n\n    async session({ session, token }) {\n      if (session.user && token.id) {\n        // Ensure token.id exists\n        session.user.id = token.id as string;\n      }\n      return session;\n    },\n\n    async signIn({ user, account }) {\n      // Google sign-in logic (remains the same)\n      if (account?.provider === \"google\" && user.email) {\n        const userId = user.id as string;\n        try {\n          const { rows } = await pool.query(\n            \"SELECT id FROM users WHERE id = $1\",\n            [userId]\n          );\n          if (rows.length === 0) {\n            await pool.query(\n              `INSERT INTO users (id, email, name, tier)\n               VALUES ($1, $2, $3, $4)`,\n              [userId, user.email, user.name || null, \"free\"]\n            );\n            console.log(\"✅ New Google user created:\", userId);\n          }\n        } catch (error) {\n          console.error(\"❌ DB error during Google sign-in:\", error);\n          return false;\n        }\n      }\n\n      return true;\n    },\n  },\n};\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 301, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramanakumar/taskglyph/src/app/api/sync/route.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { NextRequest, NextResponse } from \"next/server\";\nimport { getServerSession } from \"next-auth\";\nimport { authOptions } from \"@/lib/auth/options\";\nimport pool from \"@/lib/db/serverDb\";\n\ntype SyncOperation = {\n  id: string;\n  entityType: \"task\" | \"note\" | \"diary\" | \"pomodoro\";\n  operation: \"create\" | \"update\" | \"delete\";\n  payload: any;\n  timestamp: number;\n};\n\nexport async function POST(request: NextRequest) {\n  const session = await getServerSession(authOptions);\n\n  if (!session?.user?.id) {\n    return NextResponse.json({ error: \"Unauthorized\" }, { status: 401 });\n  }\n\n  const userId = session.user.id;\n\n  let operations: SyncOperation[];\n  try {\n    const body = await request.json();\n    operations = body.operations;\n    if (!Array.isArray(operations)) {\n      throw new Error(\"Invalid operations format\");\n    }\n  } catch (error) {\n    return NextResponse.json(\n      { error: \"Invalid request body: \" + (error as Error).message },\n      { status: 400 }\n    );\n  }\n\n  const results: { id: string; success: boolean; error?: string }[] = [];\n\n  try {\n    // Get user tier\n    const { rows: userRows } = await pool.query(\n      \"SELECT tier FROM users WHERE id = $1\",\n      [userId]\n    );\n\n    if (userRows.length === 0) {\n      return NextResponse.json({ error: \"User not found\" }, { status: 404 });\n    }\n\n    const tier = userRows[0].tier;\n\n    for (const op of operations) {\n      try {\n        let query = \"\";\n        let values: any[] = [];\n\n        switch (op.entityType) {\n          case \"task\":\n            if (op.operation === \"create\") {\n              // ... (task create logic, no changes)\n              if (tier === \"free\") {\n                const { rows } = await pool.query(\n                  \"SELECT COUNT(*) FROM tasks WHERE user_id = $1\",\n                  [userId]\n                );\n                const count = parseInt(rows[0].count);\n                if (count >= 21) {\n                  results.push({\n                    id: op.id,\n                    success: false,\n                    error: \"Free tier task limit reached\",\n                  });\n                  continue;\n                }\n              }\n\n              query = `\n                INSERT INTO tasks (id, user_id, title, completed, created_at, updated_at)\n                VALUES ($1, $2, $3, $4, $5, $6)\n                ON CONFLICT (id) DO NOTHING\n              `;\n              values = [\n                op.payload.id,\n                userId,\n                op.payload.title,\n                op.payload.completed,\n                op.payload.createdAt,\n                op.payload.updatedAt,\n              ];\n            } else if (op.operation === \"update\") {\n              // ... (task update logic, no changes)\n              query = `\n                UPDATE tasks \n                SET title = $1, completed = $2, updated_at = $3\n                WHERE id = $4 AND user_id = $5\n              `;\n              values = [\n                op.payload.title,\n                op.payload.completed,\n                op.payload.updatedAt,\n                op.payload.id,\n                userId,\n              ];\n            } else if (op.operation === \"delete\") {\n              // ... (task delete logic, no changes)\n              query = `DELETE FROM tasks WHERE id = $1 AND user_id = $2`;\n              values = [op.payload.id, userId];\n            } else {\n              throw new Error(\n                `Unsupported operation \"${op.operation}\" for entity \"${op.entityType}\"`\n              );\n            }\n            break;\n\n          case \"note\":\n            if (op.operation === \"create\") {\n              // ... (note create logic, no changes)\n              if (tier === \"free\") {\n                const { rows } = await pool.query(\n                  \"SELECT COUNT(*) FROM notes WHERE user_id = $1\",\n                  [userId]\n                );\n                const count = parseInt(rows[0].count);\n                if (count >= 14) {\n                  results.push({\n                    id: op.id,\n                    success: false,\n                    error: \"Free tier note limit reached\",\n                  });\n                  continue;\n                }\n              }\n\n              query = `\n                INSERT INTO notes (id, user_id, title, content, created_at, updated_at)\n                VALUES ($1, $2, $3, $4, $5, $6)\n                ON CONFLICT (id) DO NOTHING\n              `;\n              values = [\n                op.payload.id,\n                userId,\n                op.payload.title,\n                op.payload.content,\n                op.payload.createdAt,\n                op.payload.updatedAt,\n              ];\n            } else if (op.operation === \"update\") {\n              // ... (note update logic, no changes)\n              query = `\n                UPDATE notes \n                SET title = $1, content = $2, updated_at = $3\n                WHERE id = $4 AND user_id = $5\n              `;\n              values = [\n                op.payload.title,\n                op.payload.content,\n                op.payload.updatedAt,\n                op.payload.id,\n                userId,\n              ];\n            } else if (op.operation === \"delete\") {\n              // ... (note delete logic, no changes)\n              query = `DELETE FROM notes WHERE id = $1 AND user_id = $2`;\n              values = [op.payload.id, userId];\n            } else {\n              throw new Error(\n                `Unsupported operation \"${op.operation}\" for entity \"${op.entityType}\"`\n              );\n            }\n            break;\n\n          case \"diary\":\n            // ... (diary logic, no changes)\n            if (tier === \"free\") {\n              results.push({\n                id: op.id,\n                success: false,\n                error: \"Diary not available on Free tier\",\n              });\n              continue;\n            }\n\n            if (op.operation === \"create\" || op.operation === \"update\") {\n              query = `\n                INSERT INTO diary_entries (id, user_id, entry_date, content, created_at)\n                VALUES ($1, $2, $3, $4, $5)\n                ON CONFLICT (id) DO UPDATE \n                SET content = $4, created_at = $5\n              `;\n              values = [\n                op.payload.id,\n                userId,\n                op.payload.entryDate,\n                op.payload.content,\n                op.payload.createdAt,\n              ];\n            } else if (op.operation === \"delete\") {\n              query = `DELETE FROM diary_entries WHERE id = $1 AND user_id = $2`;\n              values = [op.payload.id, userId];\n            } else {\n              throw new Error(\n                `Unsupported operation \"${op.operation}\" for entity \"${op.entityType}\"`\n              );\n            }\n            break;\n\n          case \"pomodoro\":\n            if (op.operation === \"create\") {\n              // ... (pomodoro tier limit, no changes)\n              if (tier === \"free\") {\n                const { rows } = await pool.query(\n                  `SELECT COUNT(*) \n                   FROM pomodoro_sessions \n                   WHERE user_id = $1 \n                   AND DATE_TRUNC('month', TO_TIMESTAMP(completed_at / 1000)) = DATE_TRUNC('month', NOW())`,\n                  [userId]\n                );\n                const count = parseInt(rows[0].count);\n                if (count >= 21) {\n                  results.push({\n                    id: op.id,\n                    success: false,\n                    error: \"Free tier Pomodoro limit reached\",\n                  });\n                  continue;\n                }\n              }\n\n              // ✅ 1. Add 'type' to the query\n              query = `\n                INSERT INTO pomodoro_sessions (id, user_id, duration_minutes, completed_at, type)\n                VALUES ($1, $2, $3, $4, $5)\n                ON CONFLICT (id) DO NOTHING\n              `;\n              // ✅ 2. Add 'op.payload.type' to the values\n              values = [\n                op.payload.id,\n                userId,\n                op.payload.durationMinutes,\n                op.payload.completedAt,\n                op.payload.type || \"work\", // Default to 'work' if type is missing\n              ];\n            } else if (op.operation === \"delete\") {\n              throw new Error(\n                `Unsupported operation \"${op.operation}\" for entity \"${op.entityType}\"`\n              );\n            } else {\n              throw new Error(\n                `Unsupported operation \"${op.operation}\" for entity \"${op.entityType}\"`\n              );\n            }\n            break;\n\n          default:\n            throw new Error(`Unsupported entity type: ${op.entityType}`);\n        }\n\n        if (query) {\n          await pool.query(query, values);\n        }\n\n        results.push({ id: op.id, success: true });\n      } catch (error: any) {\n        console.error(\"Sync error for operation\", op.id, error);\n        results.push({ id: op.id, success: false, error: error.message });\n      }\n    }\n\n    return NextResponse.json({ results });\n  } catch (error: any) {\n    console.error(\n      \"A critical sync error occurred (likely a DB connection issue):\",\n      error\n    );\n    return NextResponse.json(\n      { error: \"Sync failed. Check server logs.\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}}]
}