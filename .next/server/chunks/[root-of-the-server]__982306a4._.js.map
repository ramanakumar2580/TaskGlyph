{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 123, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramanakumar/taskglyph/src/lib/db/serverDb.ts"],"sourcesContent":["import { Pool } from \"pg\";\n\nconst globalForPg = global as unknown as { pgPool: Pool | undefined };\n\nconst pool =\n  globalForPg.pgPool ??\n  new Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: {\n      rejectUnauthorized: false,\n    },\n  });\n\nif (process.env.NODE_ENV !== \"production\") {\n  globalForPg.pgPool = pool;\n}\n\nexport default pool;\n"],"names":[],"mappings":";;;;AAAA;;;;;;AAEA,MAAM;AAEN,MAAM,OACJ,YAAY,MAAM,IAClB,IAAI,4GAAI,CAAC;IACP,kBAAkB,QAAQ,GAAG,CAAC,YAAY;IAC1C,KAAK;QACH,oBAAoB;IACtB;AACF;AAEF,wCAA2C;IACzC,YAAY,MAAM,GAAG;AACvB;uCAEe","debugId":null}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramanakumar/taskglyph/src/lib/auth/options.ts"],"sourcesContent":["import type { NextAuthOptions } from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport pool from \"@/lib/db/serverDb\"; // Import your Neon DB pool\n\nexport const authOptions: NextAuthOptions = {\n  // Define all your providers\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID || \"\",\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET || \"\",\n    }),\n  ],\n\n  // Set the strategy to JWT\n  session: {\n    strategy: \"jwt\",\n  },\n\n  // Set your secret\n  secret: process.env.NEXTAUTH_SECRET,\n\n  // Add your sign-in page\n  pages: {\n    signIn: \"/auth/signin\",\n  },\n\n  // Define the callbacks\n  callbacks: {\n    // 1. This 'jwt' callback runs when a JWT is created (on sign-in).\n    // We add the user's ID to the token here.\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n      return token;\n    },\n\n    // 2. This 'session' callback runs when a session is checked.\n    // We add the 'id' from the token to the session object.\n    async session({ session, token }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n      }\n      return session;\n    },\n\n    // 3. This 'signIn' callback runs when a user signs in.\n    // This is where you save the user to your Neon DB.\n    async signIn({ user, account }) {\n      if (account?.provider === \"google\" && user.email) {\n        const userId = user.id as string;\n\n        try {\n          const { rows } = await pool.query(\n            \"SELECT id FROM users WHERE id = $1\",\n            [userId]\n          );\n\n          if (rows.length === 0) {\n            // New user → set tier = 'free' permanently\n            await pool.query(\n              `INSERT INTO users (id, email, name, tier) \n               VALUES ($1, $2, $3, $4)`,\n              [userId, user.email, user.name || null, \"free\"]\n            );\n            console.log(\"✅ New free user created:\", userId);\n          }\n        } catch (error) {\n          console.error(\"❌ DB error during sign-in:\", error);\n          return false;\n        }\n      }\n      return true;\n    },\n  },\n};\n"],"names":[],"mappings":";;;;AACA;AACA,2NAAsC,2BAA2B;;;;;;;AAE1D,MAAM,cAA+B;IAC1C,4BAA4B;IAC5B,WAAW;QACT,IAAA,gKAAc,EAAC;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB,IAAI;YAC1C,cAAc,QAAQ,GAAG,CAAC,oBAAoB,IAAI;QACpD;KACD;IAED,0BAA0B;IAC1B,SAAS;QACP,UAAU;IACZ;IAEA,kBAAkB;IAClB,QAAQ,QAAQ,GAAG,CAAC,eAAe;IAEnC,wBAAwB;IACxB,OAAO;QACL,QAAQ;IACV;IAEA,uBAAuB;IACvB,WAAW;QACT,kEAAkE;QAClE,0CAA0C;QAC1C,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YACA,OAAO;QACT;QAEA,6DAA6D;QAC7D,wDAAwD;QACxD,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YACA,OAAO;QACT;QAEA,uDAAuD;QACvD,mDAAmD;QACnD,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE;YAC5B,IAAI,SAAS,aAAa,YAAY,KAAK,KAAK,EAAE;gBAChD,MAAM,SAAS,KAAK,EAAE;gBAEtB,IAAI;oBACF,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,yIAAI,CAAC,KAAK,CAC/B,sCACA;wBAAC;qBAAO;oBAGV,IAAI,KAAK,MAAM,KAAK,GAAG;wBACrB,2CAA2C;wBAC3C,MAAM,yIAAI,CAAC,KAAK,CACd,CAAC;sCACuB,CAAC,EACzB;4BAAC;4BAAQ,KAAK,KAAK;4BAAE,KAAK,IAAI,IAAI;4BAAM;yBAAO;wBAEjD,QAAQ,GAAG,CAAC,4BAA4B;oBAC1C;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,8BAA8B;oBAC5C,OAAO;gBACT;YACF;YACA,OAAO;QACT;IACF;AACF","debugId":null}},
    {"offset": {"line": 235, "column": 0}, "map": {"version":3,"sources":["file:///Users/ramanakumar/taskglyph/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport { authOptions } from \"@/lib/auth/options\";\n\nconst handler = NextAuth(authOptions);\n\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;;;AAAA;AACA;;;;;;;AAEA,MAAM,UAAU,IAAA,kJAAQ,EAAC,8IAAW","debugId":null}}]
}